@* 
Pseudocódigo:
- Objetivo: colocar la etiqueta y el input en la misma fila.
- Cambios:
  - Reemplazar el contenedor actual por una fila Bootstrap con columnas.
  - Usar "col-auto" para la etiqueta y "col" para el input para que queden en línea.
  - Mantener el binding y el evento oninput existentes.
- No modificar la lógica C# del componente.
*@

@inject ILogger<TablaLibrosConFiltro> Logger
@if (ListEntityFiltered == null)
{
    <p>Cargando...</p>
}
else
{
    <div class="form-group">
        <div class="row align-items-center g-2">
            <div class="col-auto">
                <label for="filterText" class="col-form-label mb-0">Buscar</label>
            </div>
            <div class="col">
                <InputText id="filterText" class="form-control" @bind-Value="filterText" @oninput="FilterList" placeholder="Filtrar por titulo" />
            </div>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Titulo</th>
                <th colspan="2">Acciones</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var entity in ListEntity)
            {
                <tr>
                    <td>@entity.Id</td>
                    <td>@entity.Titulo</td>
                    <td>
                        <button title="Modificar" class="btn btn-info" @onclick="@(() => HandleModificar(entity))" >Modificar</button>

                    </td>
                    <td>
                        <button title="Eliminar" class="btn btn-danger" @onclick="@(() => HandleEliminar(entity))">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public List<Libro> ListEntity { get; set; }

    List<Libro> ListEntityFiltered { get; set; } = null;

    [Parameter]
    public EventCallback<Libro> OnModificar { get; set; }
    [Parameter]
    public EventCallback<Libro> OnEliminar { get; set; }

    string filterText = "";


    protected override async Task OnParametersSetAsync()
    {
        ListEntityFiltered = ListEntity.ToList();
        // Logger.LogInformation($"ListEntityFiltered count {ListEntityFiltered.Count}");
        // Logger.LogInformation($"ListEntity count {ListEntity.Count}");
    }

    private void HandleModificar(Libro entity)
    {
        OnModificar.InvokeAsync(entity);
    }

    private void HandleEliminar(Libro entity)
    {
        OnEliminar.InvokeAsync(entity);
    }

    private void FilterList(ChangeEventArgs e)
    {
        filterText = e.Value?.ToString() ?? string.Empty;
        // Logger.LogInformation($"Filtering by {filterText}");
        // Logger.LogInformation($"ListEntityFiltered count {ListEntityFiltered.Count}");
        // Logger.LogInformation($"ListEntity count {ListEntity.Count}");
        if (string.IsNullOrEmpty(filterText))
        {
            ListEntity = ListEntityFiltered;
        }
        else
        {
            //TODO: Ajustar para que filtre por titulo, autor, genero, editorial
            ListEntity = ListEntityFiltered.Where(x => x.Titulo.Contains(filterText,StringComparison.OrdinalIgnoreCase)).ToList();
        }
        StateHasChanged();
    }
}
