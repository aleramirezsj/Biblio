@page "/admin/libros"
@inject NavigationManager _navigationManager
@inject ILibroService _libroService
@inject SweetAlertService _sweetAlert
@rendermode InteractiveServer
<EncabezadoPage Titulo="Administración de Libros" Descripcion="Gestiona los libros en la plataforma" />
<div class="container py-4">
    @if (isLoading)
    {
        <div class="d-flex align-items-center justify-content-center my-4">
            <div class="spinner-border text-primary" role="status"></div>
            <span class="ms-2 text-primary">Cargando libros...</span>
        </div>
    }
    else
    {
        <button title="Nuevo" class="btn btn-info mb-2" @onclick="Nuevo" data-bs-toggle="modal" data-bs-target="#NuevoEditarLibro">Nuevo</button>
        @if (libros != null && libros.Count > 0)
        {
            <TablaLibrosConFiltro ListEntity="@(libros.ToList())" OnEliminar="Eliminar" OnModificar="Modificar"></TablaLibrosConFiltro>
            <NuevoEditarLibro Entity="@libroCurrent" OnGuardar="Guardar"></NuevoEditarLibro>
        }
        else
        {
            <div class="alert alert-info" role="alert">
                No hay libros registrados.
            </div>
        }
    }

</div>

@code {
    List<Libro>? libros = new List<Libro>();
    Libro libroCurrent = new Libro();

    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            libros = await _libroService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // Manejar errores aquí (por ejemplo, mostrar un mensaje al usuario)
        }
        finally
        {
            isLoading = false;
        }
    }
    private void Modificar(Libro entity)
    {
        libroCurrent = entity;       
    }
    private void Nuevo()
    {
        libroCurrent = new();
    }
    private async Task Eliminar(Libro entity)
    {
        SweetAlertResult respuesta = await _sweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "Eliminando libro",
            Text = $"¿Está seguro que desea borrar el libro {entity.Titulo}",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Si, quiero borrarlo!",
            CancelButtonText = "No, espera"
        });
        if (respuesta.IsConfirmed)
        {
            try
            {
                isLoading = true;
                await _libroService.DeleteAsync(entity.Id);
                libros = await _libroService.GetAllAsync();
                await _sweetAlert.FireAsync("Eliminado", "El libro ha sido eliminado exitosamente.", SweetAlertIcon.Success);
            }
            catch (Exception ex)
            {
                await _sweetAlert.FireAsync("Error", "Hubo un error al eliminar el libro.", SweetAlertIcon.Error);
            }
            finally
            {
                isLoading = false;
            }
        }
    }
    private async Task Guardar(Libro libroToSave)
    {
        try
        {
            isLoading = true;
            if (libroToSave.Id == 0)
            {
                // Nuevo autor
                await _libroService.AddAsync(libroToSave);
                await _sweetAlert.FireAsync("Creado", "El libro ha sido creado exitosamente.", SweetAlertIcon.Success);
            }
            else
            {
                // Actualizar autor existente
                await _libroService.UpdateAsync(libroToSave);
                await _sweetAlert.FireAsync("Actualizado", "El libro ha sido actualizado exitosamente.", SweetAlertIcon.Success);
            }
            libros = await _libroService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await _sweetAlert.FireAsync("Error", "Hubo un error al guardar el libro.", SweetAlertIcon.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
